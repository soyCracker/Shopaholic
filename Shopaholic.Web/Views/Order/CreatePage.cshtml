@{
    ViewData["Title"] = "結帳";
}

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">結帳</h1>
            </div><!-- /.col -->           
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->



<section class="content">
    <div id="FormTool" class="row">
        <div class="col-md-10">
            <div class="card">      
                <div class="card-body p-0">
                    <table class="table table-striped projects">
                        <thead>
                            <tr>
                                <th style="width: 20%">
                            
                                </th>
                                <th style="width: 40%">
                                    商品名稱
                                </th>
                                <th style="width: 20%">
                                    數量
                                </th>
                                <th style="width: 20%">
                                    價格
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(item) in cartList" v-bind:key="item.Id">
                                <td>
                                    <img v-bind:src="item.ProductImage"  height="100">                           
                                </td>
                                <td>
                                    {{ item.ProductName }}                                                   
                                </td>  
                                <td>
                                    {{ item.Quantity }}                         
                                </td> 
                                <td>
                                    {{ item.Price*item.Quantity }}                         
                                </td>  
                            </tr>                        
                        </tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <label>總金額</label><div>{{ totalPrice }}</div> 
                </div>  
            </div>
        </div>

        <div class="col-md-10">
            <!-- general form elements -->
            <div class="card card-outline card-info">
                
                <!-- /.card-header -->
                <!-- form start -->
                
                <div class="card-body">                                     
                    <div class="col-md-5">
                        <div class="form-group">
                            <label>收貨人</label>
                            <input class="form-control" v-model="nameInput" placeholder="輸入姓名">
                            <code>{{ nameInputInfo }}</code>
                        </div> 
                    </div> 
                              
                    <div class="col-md-5">
                        <div class="form-group">
                            <label>連絡電話</label>
                            <input class="form-control" v-model="phoneInput" placeholder="輸入電話">
                            <code>{{ phoneInputInfo }}</code>
                        </div>  
                    </div> 

                    <div class="col-md-10">
                        <div class="form-group">
                            <label>收貨地址</label>
                            <input class="form-control" v-model="addressInput" placeholder="輸入地址">
                            <code>{{ addressInputInfo }}</code>
                        </div>
                    </div>                    
                </div>
                <!-- /.card-body -->
                <div class="card-footer">
                    <label>付款</label>
                    <button v-on:click="LinePayCreateOrder" v-on:keydown.enter="LinePayCreateOrder">
                        <img src="~/dist/img/LINE-Pay(h)_W119_n.png" alt="linepay" height="15" width="60">
                    </button>
                </div>                
            </div>
            <!-- /.card -->
        </div>       
    </div><!-- /.container-fluid -->
</section>


@section Scripts{
    <script>  

        Vue.component('validation-provider', VeeValidate.ValidationProvider);
        Vue.component('validation-observer', VeeValidate.ValidationObserver);
                
        var FormTool = new Vue({
            el: '#FormTool',
            data:
            {
                linePayCreateOrderApi: baseurl + "/Order/api/LinePayCreateOrder",
                linePayApi: baseurl + "/Order/api/LinePay",
                linePayConfirmApi: baseurl + "/Order/api/LinePayConfirm",
                cartApi: baseurl + "/Cart/api/GetCart",
                orderIndexPage: baseurl + "/Order/Index",
                cartList: {},
                totalPrice: 0,

                ecPayCreateOrderApi: baseurl + "/Order/api/EcpayCreateOrder",
                ecPayApi: baseurl + "/Order/api/EcPay",

                nameInput: '',
                addressInput: '',
                phoneInput: '',

                nameInputInfo:'',
                addressInputInfo:'',
                phoneInputInfo:'',
            },
            mounted: function(){
                var self = this;  
                self.GetCartList();
            },
            methods:
            {       
                GetCartList: function () {
                    var self = this;              

                    ToastUtil.InfoFire('處理中')

                    axios.post(self.cartApi)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                self.cartList = result.data.Data;     
                                self.totalPrice = self.ComputeTotalPrice(self.cartList);
                            }
                            else
                            {
                                ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg)
                            }                           
                        })
                        .catch(function (error) {
                            ExceptUtil.PostExceptionFuc(error);
                        });
                },

                ComputeTotalPrice: function(cartList){
                    let totalPrice = 0;
                    cartList.forEach(function(item) {
                        totalPrice += item.Price*item.Quantity;
                    });
                    return totalPrice;
                },

                LinePayCreateOrder: function(){
                    var self = this;              

                    if(self.CheckPostData()){
                        ToastUtil.InfoFire('處理中')

                        var obj = {
                            ['OrderTypeCode']: 0,  
                            ['ReceiveMan']: self.nameInput,
                            ['Phone']: self.phoneInput,
                            ['Address']: self.addressInput
                        };

                        axios.post(self.linePayCreateOrderApi, obj)
                            .then(function (result) {
                                if(result.data.Success)
                                {
                                    self.LinePay(result.data.Data);
                                }
                                else
                                {
                                    ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                            'Msg:' + result.data.Msg);
                                }                           
                            })
                            .catch(function (error) {
                                ExceptUtil.PostExceptionFuc(error);
                            });
                    }                    
                },

                LinePay: function(orderId){
                    var self = this;              

                    ToastUtil.InfoFire('處理中')

                    var obj = {  
                        ['OrderId']: orderId,
                        ['ConfirmUrl']: self.linePayConfirmApi
                    };

                    axios.post(self.linePayApi, obj)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                ToastUtil.InfoFire('處理中...')
                                location.href = result.data.Data.CallbackUrl;
                            }
                            else
                            {
                                ToastUtil.RedirectAlert('付款失敗:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg, self.orderIndexPage);
                            }                           
                        })
                        .catch(function (error) {
                            ExceptUtil.PostExceptionFuc(error);
                        });
                },

                CheckPostData: function(){
                    var self = this;
                    self.nameInputInfo = '';
                    self.addressInputInfo = '';
                    self.phoneInputInfo = '';
                    if(!self.nameInput)
                    {
                        self.nameInputInfo = '請輸入收貨人';
                        return false;
                    }                    
                    else if(!self.addressInput)
                    {
                        self.addressInputInfo = '請輸入地址';
                        return false;
                    }                   
                    else if(!ValiUtil.IsPhone(self.phoneInput))
                    {
                        self.phoneInputInfo = '請輸入手機號碼';
                        return false;
                    }
                    else if(self.cartList.length==0)
                    {
                        return false;
                    }
                    return true;
                },

                EcPayCreateOrder: function(){
                    var self = this;              

                    if(self.CheckPostData()){
                        ToastUtil.InfoFire('處理中')

                        var obj = {
                            ['OrderTypeCode']: 0,  
                            ['ReceiveMan']: self.nameInput,
                            ['Phone']: self.phoneInput,
                            ['Address']: self.addressInput
                        };

                        axios.post(self.ecPayCreateOrderApi, obj)
                            .then(function (result) {
                                if(result.data.Success)
                                {
                                    self.EcPay(result.data.Data);
                                }
                                else
                                {
                                    ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                            'Msg:' + result.data.Msg);
                                }                           
                            })
                            .catch(function (error) {
                                ExceptUtil.PostExceptionFuc(error);
                            });
                    }                    
                },

                EcPay: function(orderId){
                    var self = this;              

                    ToastUtil.InfoFire('處理中')

                    var obj = {  
                        ['OrderId']: orderId,
                        ['ConfirmUrl']: baseurl
                    };

                    axios.post(self.ecPayApi, obj)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                ToastUtil.InfoFire('處理中...')
                                location.href = result.data.Data.CallbackUrl;
                            }
                            else
                            {
                                ToastUtil.RedirectAlert('付款失敗:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg, self.orderIndexPage);
                            }                           
                        })
                        .catch(function (error) {
                            ExceptUtil.PostExceptionFuc(error);
                        });
                }
            }
        });

    </script>
}