@using Shopaholic.Service.Model.Moels;
@model ProductDTO;

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">編輯商品</h1>
            </div><!-- /.col -->           
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->

<section class="content">
    <div id="FormTool" class="row">
        <div class="col-md-12">
            <!-- general form elements -->
            <div class="card card-outline card-info">
                
                <!-- /.card-header -->
                <!-- form start -->
                
                <div class="card-body">
                    
                    <div class="row mb-2">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>商品封面</label>
                                <div v-on:click="ShowCoverImg">
                                    <img v-bind:src="coverUrl"  height="200">
                                </div>
                                <vue-easy-lightbox v-bind:visible="coverVisible" v-bind:imgs="coverUrl" v-on:hide="CoverHandleHide"></vue-easy-lightbox>
                            </div>
                        </div>                        

                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>名稱: {{ nameInput }}</label>
                            </div>

                            <div class="row mb-2">
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label>價格: {{ priceInput }}</label>
                                    </div>
                                </div>

                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label v-if="stockInput>0">庫存: {{ stockInput }}</label>
                                        <label v-else><code>無庫存</code></label>
                                    </div> 
                                </div>                                
                            </div>   
                            
                            <div class="row mb-4">
                                <div class="col-sm-4">
                                    <div class="form-group">
                                        <label>購買數量</label>
                                        <!--<input class="form-control" v-model="quantity" placeholder="購買數量">-->
                                        <select>
                                            <option v-for="n in quantityMax" v-bind:key="n">{{ n }}</option>
                                        </select>
                                        <code>{{ quantityInfo }}</code>
                                    </div> 
                                    <a v-on:click="SubmitBtn" v-on:keydown.enter="SubmitBtn" class="btn btn-warning">加入購物車</a>                                    
                                </div>                               
                            </div>
                        </div>                           
                    </div>                 

                    <div class="form-group">
                        <label>描述</label>
                        <div>{{ descInput }}</div> 
                    </div>                   
                    
                    <div class="form-group">
                        <label>內容</label>
                        <div v-html="content"></div> 
                    </div> 

                </div>               
            </div>
            <!-- /.card -->
        </div>       
    </div><!-- /.container-fluid -->
</section>


@section Scripts{
    <script>  
              
        var FormTool = new Vue({
            el: '#FormTool',
            data:
            {
                addToCartApi: baseurl + "/Cart/api/AddToCart",
                addFlowApi: baseurl + "/Flow/api/Add",
                getProductApi: baseurl + "/Product/api/Get",
                productId: @Model.Id,
                coverUrl: '',
                nameInput: '',
                descInput: '',
                priceInput: 0,
                stockInput: 0,
                content: '',
                coverVisible: false,
                quantity: 1,
                quantityInfo: '',
                quantityMax:10,
            },
            mounted: function(){
                var self = this;
                self.InitUI();
                self.AddFlow();
            },
            methods:
            {       
                ShowCoverImg: function() {
                    var self = this;
                    self.coverVisible = true;
                },
                       
                CoverHandleHide: function() {
                    var self = this;
                    self.coverVisible = false;
                },

                InitUI: function(){
                    var self = this;
                    ToastUtil.InfoFire('處理中')

                    axios.get(self.getProductApi + '?ID=' + self.productId)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                self.productId = result.data.Data.Id;
                                self.coverUrl = result.data.Data.Image;
                                self.nameInput = result.data.Data.Name;
                                self.descInput = result.data.Data.Description;
                                self.priceInput = result.data.Data.Price;
                                self.stockInput = result.data.Data.Stock;
                                self.content = result.data.Data.Content;
                                self.quantityMax = self.stockInput>10?10:self.stockInput
                            }
                            else
                            {
                                ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg);
                            }                           
                        })
                        .catch(function (error) {
                            ExceptUtil.PostExceptionFuc(error);
                        });
                },

                SubmitBtn: function () {
                    var self = this;
                    if(self.AddCartCheck())
                    {
                        ToastUtil.InfoFire('處理中')

                        var obj = {
                            ['ProductId']: self.productId,
                            ['Quantity']: self.quantity,
                        };

                        axios.post(self.addToCartApi, obj)
                            .then(function (result) {

                                if(result.data.Success)
                                {
                                    ToastUtil.InfoFire('已加入購物車');   
                                    self.Clear();
                                    LayoutTopBarTool.PutCart();                                   
                                }
                                else
                                {
                                    ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                            'Msg:' + result.data.Msg);
                                }                           
                            })
                            .catch(function (error) {
                                ExceptUtil.PostExceptionFuc(error);
                            });
                    }                    
                },

                AddCartCheck: function () {
                    var self = this;
                    if(self.quantity==0 || self.quantity>self.stockInput){
                        //ToastUtil.ErrorAlert('商品數量錯誤');
                        self.quantityInfo = '商品數量錯誤';
                        return false;
                    }
                    else{
                        return true;
                    }
                },

                Clear: function(){
                    var self = this;
                    self.quantityInfo = '';
                    self.quantity = 0;
                },

                AddFlow: function () {
                    var self = this;
                    var obj = {
                        ['Enter']: window.location.pathname,
                    };
                    axios.post(self.addFlowApi, obj)
                        .then(function (result) {})
                        .catch(function (error) {});                   
                },
            }
        });

    </script>
}