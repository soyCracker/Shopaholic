@using Shopaholic.CMS.Model.ViewModels;
@model ProductEditVM;

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">編輯商品</h1>
            </div><!-- /.col -->           
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->

<section class="content">
    <div id="FormTool" class="row">
        <div class="col-md-12">
            <!-- general form elements -->
            <div class="card card-outline card-info">
                
                <!-- /.card-header -->
                <!-- form start -->
                
                <div class="card-body">
                    
                    <div class="form-group">
                        <label>商品封面</label>
                        <div v-on:click="ShowCoverImg">
                            <img v-bind:src="coverUrl"  height="200">
                        </div>
                        <vue-easy-lightbox v-bind:visible="coverVisible" v-bind:imgs="coverUrl" v-on:hide="CoverHandleHide"></vue-easy-lightbox>
                    </div>  

                    <div class="form-group">
                        <div  class="custom-file">
                            @{
                                //自訂按鈕觸發input file的click
                            }
                            <input ref="coverInput" v-on:change="SetCoverUrl" type="file" accept=".jpg, .png" v-show="false" />
                            <button type="button" class="btn btn-success" v-on:click="UploadCoverBtn">上傳商品封面</button>
                        </div>
                        
                    </div>

                    <validation-observer ref="validObserver" v-slot="{ valid }" >
                        <validation-provider rules="required" v-slot="{ errors }">
                            <div class="form-group">
                                <label>名稱</label>
                                <input class="form-control" v-model="nameInput" placeholder="輸入名稱">
                                <span>{{ errors[0] }}</span>
                            </div> 
                        </validation-provider>
           
                        <div class="form-group">
                            <label>描述</label>
                            <input class="form-control" v-model="descInput" placeholder="輸入描述">
                        </div> 

                        <validation-provider rules="required" v-slot="{ errors }">
                            <div class="form-group">
                                <label>價格</label>
                                <input class="form-control" v-model="priceInput" placeholder="輸入價格">
                                <span>{{ errors[0] }}</span>
                            </div>
                        </validation-provider>
                     
                        <validation-provider rules="required" v-slot="{ errors }">
                            <div class="form-group">
                                <label>庫存</label>
                                <input class="form-control" v-model="stockInput" placeholder="輸入庫存">
                                <span>{{ errors[0] }}</span>
                            </div> 
                        </validation-provider>                    
                    </validation-observer>

                    <div class="form-group">
                        <label>類別</label>
                        <select class="form-control" v-model="categorySelected">
                            <option v-for="option in categoryList" v-bind:value="option.Id">
                                {{ option.Name }}
                            </option>
                        </select>
                    </div> 
                    
                    <div class="form-group">
                        <label>內容</label>
                        <textarea id="summernote">@Model.ProductVM.Content</textarea>
                    </div> 

                </div>
                <!-- /.card-body -->
                <div class="card-footer">
                    <a v-on:click="SubmitBtn" v-on:keydown.enter="SubmitBtn" class="btn btn-primary">Submit</a>
                </div>                
            </div>
            <!-- /.card -->
        </div>       
    </div><!-- /.container-fluid -->
</section>


@section Scripts{
    <script>  

        Vue.component('validation-provider', VeeValidate.ValidationProvider);
        Vue.component('validation-observer', VeeValidate.ValidationObserver);
                
        var FormTool = new Vue({
            el: '#FormTool',
            data:
            {
                upadteApi: baseurl + "/Product/api/Update",
                uploadEditorImageApi: baseurl + "/Product/api/UploadEditorImage",
                uploadCoverImageApi: baseurl + "/Product/api/UploadCoverImage",
                getCategoryListApi: baseurl + "/Category/api/GetList",
                coverVisible: false,
                //預設圖片路徑
                coverUrl: '@Model.ProductVM.Image',
                coverFile: null,
                nameInput: '@Html.Raw(@Model.ProductVM.Name)',
                descInput: '@Html.Raw(@Model.ProductVM.Description)',
                priceInput: @Model.ProductVM.Price,
                stockInput: @Model.ProductVM.Stock,
                categorySelected: @Model.ProductVM.CategoryId,
                categoryList: null,
                content: null,
                id: @Model.ProductVM.Id
            },
            mounted: function(){
                var self = this;
                console.log('== mounted ==');
                //self.GetCategoryList(self.getCategoryListApi);                
                $('#summernote').summernote({
                    height:300,
                    callbacks:{
                        onImageUpload: function(image) {
                            console.log('summernote onImageUpload');
                            self.UploadEditorImage(self.uploadEditorImageApi, image[0]);
                        }
                    }
                });
            },
            methods:
            {       
                /*ReadonlyImgPlaceholder: function(){
                    return 'https://via.placeholder.com/1200/FFFFFF.png?text=1'
                },*/

                ShowCoverImg: function() {
                    var self = this;
                    self.coverVisible = true;
                },

                CoverHandleHide: function() {
                    var self = this;
                    self.coverVisible = false;
                },
                
                //自訂按鈕觸發input file的click
                UploadCoverBtn: function(){
                    var self = this;
                    self.$refs.coverInput.click();
                },

                SetCoverUrl: function() {
                    var self = this;
                    //get input file
                    self.coverFile = self.$refs.coverInput.files[0];

                    //get input file url
                    //假上傳，還未上傳到server
                    var reader = new FileReader();
                    reader.onload = (e) => {                        
                        self.coverUrl = e.target.result;
                        //console.log(self.coverUrl);
                    }
                    reader.readAsDataURL(self.coverFile);
                },

                UploadEditorImage: function(url, obj){
                    var self = this;
                    let formData = new FormData();
                    formData.append('file', obj); //file為api之參數名稱
                    axios.post(url, formData, {
                                headers: {
                                    'Content-Type': 'multipart/form-data'
                                }
                    })
                        .then(function (result) {  
                            if(result.data.Success){
                                $('#summernote').summernote('insertImage', result.data.Data);                               
                            } 
                            else{
                                ToastUtil.ErrorAlert('照片上傳失敗')
                            }                            
                        })
                        .catch(function (error) {
                            if( error.response ){
                                console.log(error.response.Data); // => the response payload                                
                                ToastUtil.ErrorAlert('Success:' + error.response.data.Success + '\n' +
                                        'Msg:' + error.response.data.Msg)
                            }
                            else{
                                ToastUtil.ErrorAlert('post error')
                            }
                        });
                },               

                SubmitBtn: async function () {
                    var self = this;

                    console.log(self.categorySelected)                   
                    console.log($('#summernote').summernote('code'));   
                    //取得summernote content
                    self.content = $('#summernote').summernote('code');

                    //click觸發驗證
                    var isValid = await self.$refs.validObserver.validate();
                    if(isValid) {
                        ToastUtil.InfoFire('處理中')
                        if(self.coverFile!=null) {
                            self.UploadCoverImage(self.uploadCoverImageApi, self.coverFile);
                        }
                        else{
                            self.PostContent(self.GetPostObj(), self.upadteApi);
                        }                                              
                    }
                    else{
                        ToastUtil.ErrorAlert('validate error')
                        console.log('validate error');
                    }
                },

                UploadCoverImage: function(url, obj){
                    var self = this;
                    let formData = new FormData();
                    formData.append('file', obj); //file為api之參數名稱
                    axios.post(url, formData, {
                                headers: {
                                    'Content-Type': 'multipart/form-data'
                                }
                    })
                        .then(function (result) {  
                            if(result.data.Success)
                            {
                                self.coverUrl = result.data.Data;
                                self.PostContent(self.GetPostObj(), self.upadteApi);
                            } 
                            else
                            {
                                ToastUtil.ErrorAlert('照片上傳失敗');
                            }                            
                        })
                        .catch(function (error) {
                            if( error.response ){
                                console.log(error.response.Data); // => the response payload                                
                                ToastUtil.ErrorAlert('Success:' + error.response.data.Success + '\n' +
                                        'Msg:' + error.response.data.Msg);
                            }
                            else{
                                ToastUtil.ErrorAlert('post error');
                            }
                        });
                },   

                GetPostObj: function () {
                    var self = this;

                    var obj = {
                        ['Id']: self.id,
                        ['Name']: self.nameInput,
                        ['Description']: self.descInput,
                        ['Content']: self.content,
                        ['Price']: self.priceInput,
                        ['Stock']: self.stockInput,
                        ['Image']: self.coverUrl,
                        ['CategoryId']: self.categorySelected
                    };

                    return obj;
                },

                PostContent: function (obj, url) {
                    var self = this;
                    console.log(url + ' post');
                    axios.post(url, obj)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                location.href = '@Url.Action("Index")';
                            }
                            else
                            {
                                ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg)
                            }                           
                        })
                        .catch(function (error) {
                            if( error.response ){
                                console.log(error.response.data); // => the response payload 
                                ToastUtil.ErrorAlert('Success:' + error.response.data.Success + '\n' +
                                        'Msg:' + error.response.data.Msg)
                            }
                            else{
                                ToastUtil.ErrorAlert('post error')
                            }
                        });
                },

                GetCategoryList: function (url) {
                    var self = this;
                    console.log(url + ' post');
                    axios.post(url)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                self.categoryList = result.data.Data;
                            }
                            else
                            {
                                ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg)
                            }                           
                        })
                        .catch(function (error) {
                            if( error.response ){
                                console.log(error.response.data); // => the response payload 
                                ToastUtil.ErrorAlert('Success:' + error.response.data.Success + '\n' +
                                        'Msg:' + error.response.data.Msg)
                            }
                            else{
                                ToastUtil.ErrorAlert('post error')
                            }
                        });
                }
            }
        });

    </script>
}