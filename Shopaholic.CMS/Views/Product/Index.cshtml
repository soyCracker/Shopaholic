@using System.Collections.Generic



@{
}


<div id="FormTool">

    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">商品列表</h1>
                </div><!-- /.col -->
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                      <li class="breadcrumb-item"> 
                          <a asp-controller="Product" asp-action="CreatePage" class="btn btn-primary btn-sm">
                             <i class="fas fa-folder">
                             </i>
                             新增           
                          </a>
                      </li>
                    </ol>
                  </div>
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->

    <!-- Default box -->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">商品</h3>    
        </div>
        <div id="TableTool" class="card-body p-0">
            <table class="table table-striped projects">
                <thead>
                    <tr>
                        <th style="width: 10%">
                            #
                        </th>
                        <th style="width: 20%">
                            商品名稱
                        </th>
                        <th style="width: 10%">
                            類別
                        </th>
                        <th style="width: 10%">
                            價格
                        </th>
                        <th style="width: 10%">
                            庫存
                        </th> 
                        <th style="width: 40%">
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item) in productList" v-bind:key="item.id">
                        <td>
                            {{ item.Id }}
                        </td>
                        <td>
                            {{ item.Name }}                        
                        </td>  
                        <td>
                            {{ item.CategoryName }}                        
                        </td>
                        <td>
                            {{ item.Price }}                         
                        </td>  
                        <td>
                            {{ item.Stock }}                       
                        </td>
                        <td class="project-actions text-right">        
                            <a class="btn btn-info btn-sm" v-bind:href="'/Product/EditPage/'+item.Id">
                                <i class="fas fa-pencil-alt">
                                </i>
                                修改
                            </a>
                            <a class="btn btn-danger btn-sm" v-on:click="DeleteProduct(item.Id)">
                                <i class="fas fa-trash">
                                </i>
                                刪除
                            </a>
                        </td>
                    </tr>                        
                </tbody>
            </table>
        </div>

        <div class="card-tools">
            <ul class="pagination pagination-sm float-right">
                <li class="page-item"><a class="page-link" v-on:click="SelectPage(currentPage-1)">&laquo;</a></li>
                <li v-for="n in pages">
                    <a class="page-link" v-on:click="SelectPage(n)">
                        {{ n }}
                    </a>
                </li>
                <li class="page-item"><a class="page-link" v-on:click="SelectPage(currentPage+1)">&raquo;</a></li>
            </ul>
        </div>

        <!-- /.card-body -->
    </div>
    <!-- /.card -->

</div>

@section Scripts{
    <script>

        var FormTool = new Vue({
            el: '#FormTool',
            data:
            {
                getPagesApi: baseurl + "/Product/api/GetProductPages",
                deleteApi: baseurl + "/Product/api/Delete",
                productSearchApi: baseurl + "/Product/api/Search",
                pages: 1,
                pageSize: 5,
                currentPage: 1,
                productList: {},
                categoryName: '',
            },
            mounted: function()
            {
                var self = this;
                self.GetPages();
                self.SelectPage(1);
            },
            methods:
            {

                SelectPage: function (page) {
                    var self = this;
                    if(page>=1&&page<=self.pages)
                    {
                        ToastUtil.InfoFire('處理中')

                        self.currentPage = page;
                        var obj = {
                            ['Page']: page,
                            ['PageSize']: self.pageSize
                        };

                        axios.post(self.productSearchApi, obj)
                            .then(function (result) {
                                if(result.data.Success)
                                {
                                    self.productList = result.data.Data;
                                }
                                else
                                {
                                    ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                            'Msg:' + result.data.Msg)
                                }                           
                            })
                            .catch(function (error) {
                                self.PostExceptionFuc(error);
                            });
                    }                    
                },

                GetPages: function () {
                    var self = this;
                    
                    var obj = {
                        ['PageSize']: self.pageSize
                    };

                    axios.post(self.getPagesApi, obj)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                console.log("Success")
                                self.pages = result.data.Data;
                            }
                            else
                            {
                                ToastUtil.ErrorAlert('Success:' + result.data.Success + '\n' +
                                        'Msg:' + result.data.Msg)
                            }                           
                        })
                        .catch(function (error) {
                            self.PostExceptionFuc(error);
                        });
                },

                DeleteProduct: function (id) {
                    var self = this;
                    if(confirm("確定刪除?")) {

                        ToastUtil.InfoFire('處理中')

                        var obj = {
                            ['Id']: id
                        };

                        axios.post(self.deleteApi, obj)
                        .then(function (result) {
                            if(result.data.Success)
                            {
                                self.SelectPage(self.currentPage);
                                //location.href = '@Url.Action("Index")';
                            }                         
                        })
                        .catch(function (error) {                                    
                            self.PostExceptionFuc(error);
                        });
                    }
                },

                PostExceptionFuc: function (error) {
                    if( error.response ){
                        console.log(error.response.data); // => the response payload 
                        ToastUtil.ErrorAlert('Success:' + error.response.data.Success + '\n' +
                                'Msg:' + error.response.data.Msg)
                    }
                    else{
                        ToastUtil.ErrorAlert('post error')
                    }
                }
            }
        });
    </script>
}